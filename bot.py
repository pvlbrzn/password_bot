import string
import re
import hashlib
import logging
import requests
import secrets
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–µ—Å—Ç–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
user_messages = {}

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π (–∏—Å—Ö–æ–¥—è –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
COMMON_PASSWORDS = {
    "123456", "password", "123456789", "12345", "12345678", "qwerty", "abc123", "111111", "123123", "password1",
    "1234", "qwerty123", "1q2w3e4r", "123qwe", "letmein", "monkey", "dragon", "sunshine", "123321", "qwertyuiop"
}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ø–æ—Ö–æ–∂–∏—Ö" –ø–∞—Ä–æ–ª–µ–π
def is_password_common(password: str) -> bool:
    simplified = re.sub(r'[^a-zA-Z0-9]', '', password.lower())  # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    return simplified in COMMON_PASSWORDS


# –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –ø–∞—Ä–æ–ª—å —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Have I Been Pwned
def check_password_breach(password: str) -> bool:
    sha1_hash = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    prefix = sha1_hash[:5]
    suffix = sha1_hash[5:]

    try:
        response = requests.get(f"https://api.pwnedpasswords.com/range/{prefix}")
        response.raise_for_status()
        if suffix in response.text:
            return True
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è: {e}")
    return False


# –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–∑–ª–æ–º–∞ –ø–∞—Ä–æ–ª—è
def estimate_crack_time(password: str) -> tuple:
    if is_password_common(password):
        return 0.001, "—Å–µ–∫—É–Ω–¥"  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤–∑–ª–æ–º

    attempts_per_second = 1_000_000_000  # 1 –º–∏–ª–ª–∏–∞—Ä–¥ –ø–æ–ø—ã—Ç–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É

    has_lower = any(c.islower() for c in password)
    has_upper = any(c.isupper() for c in password)
    has_digits = any(c.isdigit() for c in password)
    has_special = any(c in string.punctuation for c in password)

    charset_size = 0
    if has_lower:
        charset_size += 26  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if has_upper:
        charset_size += 26  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if has_digits:
        charset_size += 10  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä
    if has_special:
        charset_size += len(string.punctuation)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤

    if len(password) < 8:
        return 0.1, "—Å–µ–∫—É–Ω–¥"  # –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —Å—Ä–∞–∑—É –ª–µ–≥–∫–æ –≤–∑–ª–æ–º–∞—Ç—å

    total_combinations = charset_size ** len(password)
    estimated_time = total_combinations / attempts_per_second  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –≤—ã–≤–æ–¥–∏–º –≤ –≥–æ–¥–∞—Ö, –º–µ—Å—è—Ü–∞—Ö –∏–ª–∏ –¥–Ω—è—Ö
    if estimated_time >= 31_536_000:  # –í—Ä–µ–º—è –±–æ–ª—å—à–µ –≥–æ–¥–∞ (31,536,000 —Å–µ–∫—É–Ω–¥ –≤ –≥–æ–¥—É)
        estimated_time_in_years = estimated_time / 31_536_000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥–æ–¥—ã
        return estimated_time_in_years, "–ª–µ—Ç"
    elif estimated_time >= 2_592_000:  # –í—Ä–µ–º—è –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ (2,592,000 —Å–µ–∫—É–Ω–¥ –≤ –º–µ—Å—è—Ü–µ)
        estimated_time_in_months = estimated_time / 2_592_000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–µ—Å—è—Ü—ã
        return estimated_time_in_months, "–º–µ—Å—è—Ü–µ–≤"
    elif estimated_time >= 86_400:  # –í—Ä–µ–º—è –±–æ–ª—å—à–µ –¥–Ω—è (86,400 —Å–µ–∫—É–Ω–¥ –≤ —Å—É—Ç–∫–∞—Ö)
        estimated_time_in_days = estimated_time / 86_400  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥–Ω–∏
        return estimated_time_in_days, "–¥–Ω–µ–π"

    return estimated_time, "—Å–µ–∫—É–Ω–¥"  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è
def generate_recommendation(time_to_crack: float, time_unit: str, password: str) -> str:
    recommendations = []
    if is_password_common(password):
        return "‚ö† –í–∞—à –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω! –ò–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ."

    if check_password_breach(password):
        return "üö® –í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω –≤ —É—Ç–µ—á–∫–µ! –ò–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ."

    if len(password) < 8:
        recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 8-12).")

    if not any(c.isdigit() for c in password):
        recommendations.append("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.")

    if not any(c in string.punctuation for c in password):
        recommendations.append("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª.")

    if not any(c.isupper() for c in password):
        recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã.")

    if time_to_crack < 1:
        recommendations.append("–ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –≤–∑–ª–æ–º–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ —Å–ª–æ–∂–Ω–µ–µ!")

    if recommendations:
        return "‚ö† –í–∞—à –ø–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:\n- " + "\n- ".join(recommendations)
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤–∑–ª–æ–º–∞
        return f"‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å! –û–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–æ–±—Ä–∞–Ω –∑–∞ {time_to_crack:.2f} {time_unit}."


# –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–∞—Ä–æ–ª—è
def password_tip():
    return (
        "üí° **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å?**\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º—É–º 12 —Å–∏–º–≤–æ–ª–æ–≤.\n"
        "2. –í–∫–ª—é—á–∞–π—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã.\n"
        "3. –î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã.\n"
        "4. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏."
    )


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
def generate_random_password(length=12):
    alphabet = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(alphabet) for _ in range(length))


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª—è
async def send_settings(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = KeyboardButton('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞')
    button2 = KeyboardButton('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã')
    button3 = KeyboardButton('–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–∞—Ä–æ–ª—è')
    button4 = KeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–Ω–µ –ø–∞—Ä–æ–ª—å')
    markup.add(button1, button2, button3, button4)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª—è:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫
@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    logger.info(f"User {message.from_user.id} started the bot.")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏:")
    await send_settings(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings
@dp.message_handler(commands=['settings'])
async def settings_command(message: Message):
    await send_settings(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@dp.message_handler(lambda message: message.text == '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–∞—Ä–æ–ª—è')
async def tip_password(message: Message):
    await message.answer(password_tip())


@dp.message_handler(lambda message: message.text == '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞')
async def min_length(message: Message):
    await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 8 —Å–∏–º–≤–æ–ª–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 12 –∏ –±–æ–ª–µ–µ.")


@dp.message_handler(lambda message: message.text == '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã')
async def min_symbols(message: Message):
    await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏ –æ–¥–∏–Ω —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, !, @, #).")


@dp.message_handler(lambda message: message.text == '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–Ω–µ –ø–∞—Ä–æ–ª—å')
async def generate_password(message: Message):
    new_password = generate_random_password()
    await message.answer(
        f"üõ† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {new_password}\n(–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.)")


@dp.message_handler()
async def check_password(message: Message):
    password = message.text
    estimated_time, time_unit = estimate_crack_time(password)
    recommendation = generate_recommendation(estimated_time, time_unit, password)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—Ä–æ–ª–µ
    sent_message = await message.answer(
        f"‚è≥ –í–∞—à –ø–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞: {estimated_time:.2f} {time_unit}\n{recommendation}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.from_user.id not in user_messages:
        user_messages[message.from_user.id] = []

    user_messages[message.from_user.id].append(sent_message.message_id)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
